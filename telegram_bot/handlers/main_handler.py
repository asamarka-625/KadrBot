# –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
from aiogram import Router, F
from aiogram.filters import StateFilter, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏
from telegram_bot.core import config
from telegram_bot.keyboards import (create_main_keyboard, create_vacancies_inline, create_faq_inline)
from telegram_bot.utils import edit_message, PostAnketaStates
from telegram_bot.keyboards import (create_back_inline, create_form_inline, create_administration_positions_inline,
                                    create_districts_inline, create_site_inline, create_submit_documents_inline,
                                    create_info_request_inline)
from telegram_bot.services import (fetch_available_posts, fetch_persons_info, fetch_judgment_places,
                                   fetch_judgement_place_byid, fetch_candidate_status, resend_document_status)


router = Router()


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@router.message(StateFilter('*'), Command('start'))
async def start_command(message: Message, state: FSMContext):
    await state.clear()

    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –±–æ—Ç –ø–æ –ø–æ–º–æ—â–∏ –ø–æ–¥–±–æ—Ä—É –≤–∞–∫–∞–Ω—Å–∏–∏ –º–∏—Ä–æ–≤—ã—Ö —Å—É–¥–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        reply_markup=await create_main_keyboard()
    )


# –ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
@router.message(StateFilter('*'), F.text.in_(config.VACANCIES))
async def vacancies_command(message: Message, state: FSMContext):
    await state.clear()

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–∞–∫–æ–µ –º–µ—Å—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏—Ç—å—Å—è",
        reply_markup=await create_vacancies_inline()
    )


# –ö–æ–º–∞–Ω–¥–∞ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(StateFilter('*'), F.text.in_(config.FAQ))
async def faq_command(message: Message, state: FSMContext):
    await state.clear()

    await message.answer(
        text="–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
        reply_markup=await create_faq_inline()
    )


# –ö–æ–ª–±—ç–∫ –≤–æ–ø—Ä–æ—Å–∞ FAQ
@router.callback_query(StateFilter('*'), F.data.startswith("answer"))
async def answer_for_faq_callback_run(callback_query: CallbackQuery):
    answer_index = int(callback_query.data.split("-")[1])

    question, answer = config.FAQ_ANSWERS[answer_index]
    await edit_message(
        callback_query.message,
        text=answer,
        keyboard=await create_back_inline(back="faq")
    )
    await callback_query.answer(text=question, show_alert=False)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–µ
@router.message(StateFilter('*'), Command("status"))
@router.message(StateFilter('*'), F.text.in_(config.STATUS))
async def request_command(message: Message, state: FSMContext):
    await state.clear()

    user_id = message.from_user.id

    data = fetch_candidate_status(user_id)
    status = data["status"]

    if status is None:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–µ")
        return

    message_to_candidate = data['message_to_candidate']

    text_to_send = ("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–æ–º. "
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –≤—ã –ø–∏—Å—å–º–æ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤—ã—à–µ –ø–æ—á—Ç—ã?\n\n "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –µ—â–µ —Ä–∞–∑ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ'"),

    if message_to_candidate:
        text_to_send = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞:\n\n" \
                       f"üí¨ {str(message_to_candidate)}"

    if status == "not_read":
        text = ("–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:\nüîÉ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. üîÉ\n"
                "–í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                "–í–∞–∂–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É:\n\n"
                "'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏'")

    elif status == "not_access":
        text = ("–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: \n‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ ‚ùå\n"
                f"{text_to_send}",)
        resend_document_status(user_id)

    elif status == "access":
        text = ("–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: \n‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É ‚úÖ\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ –≥–æ—Å. —Å–ª—É–∂–±—É.")

    else:
        await message.answer(text="–û—à–∏–±–∫–∞", show_alert=False)
        return

    await message.answer(
        text,
        reply_markup=await create_info_request_inline(status)
    )


# –ö–æ–ª–±—ç–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
@router.callback_query(StateFilter('*'), F.data.startswith("back"))
async def back_callback_run(callback_query: CallbackQuery, state: FSMContext):
    back = callback_query.data.split("-")[1]

    if back == "faq":
        text = "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
        keyboard = await create_faq_inline()

    elif back == "position":
        data = fetch_available_posts()
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ"
        keyboard = await create_administration_positions_inline(data)

        await state.set_state(PostAnketaStates.position)

    elif back == "district":
        search = await state.get_data()
        post = search["post"]

        if post is None:
            await callback_query.answer(text="–û—à–∏–±–∫–∞", show_alert=False)
            return

        districts = fetch_persons_info(post)
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—É?"
        keyboard = await create_districts_inline(districts)

        await state.set_state(PostAnketaStates.district)

    elif back == "site":
        await state.set_state(PostAnketaStates.site)

        search = await state.get_data()
        post = search["post"]
        district = search["district"]

        if post is None or district is None:
            await callback_query.answer(text="–û—à–∏–±–∫–∞", show_alert=False)
            return

        sites = fetch_judgment_places(district, int(post))

        if not sites:
            await edit_message(
                callback_query.message,
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤.",
                keyboard=await create_back_inline(back="district")
            )
            await callback_query.answer(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤", show_alert=False)
            return

        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π —É—á–∞—Å—Ç–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
        keyboard = await create_site_inline(sites)

    elif back == "form":
        search = await state.get_data()
        id_site = search["site"]

        if id_site is None:
            await callback_query.answer(text="–û—à–∏–±–∫–∞", show_alert=False)
            return

        data = fetch_judgement_place_byid(id_site)

        text = (f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—á–∞—Å—Ç–∫—É ‚Ññ{id_site}\n\n</b>"
                f"<b>–§–ò–û –º–∏—Ä–æ–≤–æ–≥–æ —Å—É–¥—å–∏:</b> \n{data['fio_judgment']}"
                f"<b>\n–¢–µ–ª–µ—Ñ–æ–Ω:</b>{data['phone']}"
                f"<b>\n–†–∞–π–æ–Ω:</b><i>{data['district']}</i>"
                f"<b>\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–∫–µ:</b>\n{data['description']}")

        keyboard = await create_submit_documents_inline(id_site=id_site)

        await state.set_state(PostAnketaStates.submit_documents)

    elif back == "policy":
        search = await state.get_data()
        id_site = search["site"]

        if id_site is None:
            await callback_query.answer(text="–û—à–∏–±–∫–∞", show_alert=False)
            return

        text = ("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –≤ –ö–æ–º–∏—Ç–µ—Ç. –ù—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ –ö–æ–º–∏—Ç–µ—Ç–∞."
                "\n–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –ò –∑–∞—Ç–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞.\n"
                "\n–ï—Å–ª–∏ –≤—ã –ø—Ä–æ—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
                "'<b>–Ø –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É –Ω–∞ —Å–∞–π—Ç–µ</b>'")
        keyboard = await create_form_inline(id_site=id_site)

    else:
        await callback_query.answer()
        return

    await edit_message(
        callback_query.message,
        text=text,
        keyboard=keyboard
    )
    await callback_query.answer(text="–ù–∞–∑–∞–¥", show_alert=False)